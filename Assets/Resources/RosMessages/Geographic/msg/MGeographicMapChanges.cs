//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Geographic
{
    public class MGeographicMapChanges : Message
    {
        public const string RosMessageName = "geographic_msgs/GeographicMapChanges";

        //  A list of geographic map changes.
        public MHeader header;
        //  stamp specifies time of change
        //  frame_id (normally /map)
        public MGeographicMap diffs;
        //  new and changed points and features
        public Uuid.MUniqueID[] deletes;
        //  deleted map components

        public MGeographicMapChanges()
        {
            this.header = new MHeader();
            this.diffs = new MGeographicMap();
            this.deletes = new Uuid.MUniqueID[0];
        }

        public MGeographicMapChanges(MHeader header, MGeographicMap diffs, Uuid.MUniqueID[] deletes)
        {
            this.header = header;
            this.diffs = diffs;
            this.deletes = deletes;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.AddRange(diffs.SerializationStatements());
            
            listOfSerializations.Add(BitConverter.GetBytes(deletes.Length));
            foreach(var entry in deletes)
                listOfSerializations.Add(entry.Serialize());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            offset = this.diffs.Deserialize(data, offset);
            
            var deletesArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.deletes= new Uuid.MUniqueID[deletesArrayLength];
            for(var i = 0; i < deletesArrayLength; i++)
            {
                this.deletes[i] = new Uuid.MUniqueID();
                offset = this.deletes[i].Deserialize(data, offset);
            }

            return offset;
        }

        public override string ToString()
        {
            return "MGeographicMapChanges: " +
            "\nheader: " + header.ToString() +
            "\ndiffs: " + diffs.ToString() +
            "\ndeletes: " + System.String.Join(", ", deletes.ToList());
        }
    }
}
