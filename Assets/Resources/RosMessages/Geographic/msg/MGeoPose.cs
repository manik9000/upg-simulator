//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Geographic
{
    public class MGeoPose : Message
    {
        public const string RosMessageName = "geographic_msgs/GeoPose";

        //  Geographic pose, using the WGS 84 reference ellipsoid.
        // 
        //  Orientation uses the East-North-Up (ENU) frame of reference.
        //  (But, what about singularities at the poles?)
        public MGeoPoint position;
        public Geometry.MQuaternion orientation;

        public MGeoPose()
        {
            this.position = new MGeoPoint();
            this.orientation = new Geometry.MQuaternion();
        }

        public MGeoPose(MGeoPoint position, Geometry.MQuaternion orientation)
        {
            this.position = position;
            this.orientation = orientation;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(position.SerializationStatements());
            listOfSerializations.AddRange(orientation.SerializationStatements());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.position.Deserialize(data, offset);
            offset = this.orientation.Deserialize(data, offset);

            return offset;
        }

        public override string ToString()
        {
            return "MGeoPose: " +
            "\nposition: " + position.ToString() +
            "\norientation: " + orientation.ToString();
        }
    }
}
