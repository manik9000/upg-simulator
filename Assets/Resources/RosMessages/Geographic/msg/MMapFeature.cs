//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Geographic
{
    public class MMapFeature : Message
    {
        public const string RosMessageName = "geographic_msgs/MapFeature";

        //  Geographic map feature.
        // 
        //  A list of WayPoint IDs for features like streets, highways, hiking
        //  trails, the outlines of buildings and parking lots in sequential
        //  order.
        // 
        //  Feature lists may also contain other feature lists as members.
        public Uuid.MUniqueID id;
        //  Unique feature identifier
        public Uuid.MUniqueID[] components;
        //  Sequence of feature components
        public MKeyValue[] props;
        //  Key/value properties for this feature

        public MMapFeature()
        {
            this.id = new Uuid.MUniqueID();
            this.components = new Uuid.MUniqueID[0];
            this.props = new MKeyValue[0];
        }

        public MMapFeature(Uuid.MUniqueID id, Uuid.MUniqueID[] components, MKeyValue[] props)
        {
            this.id = id;
            this.components = components;
            this.props = props;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(id.SerializationStatements());
            
            listOfSerializations.Add(BitConverter.GetBytes(components.Length));
            foreach(var entry in components)
                listOfSerializations.Add(entry.Serialize());
            
            listOfSerializations.Add(BitConverter.GetBytes(props.Length));
            foreach(var entry in props)
                listOfSerializations.Add(entry.Serialize());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.id.Deserialize(data, offset);
            
            var componentsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.components= new Uuid.MUniqueID[componentsArrayLength];
            for(var i = 0; i < componentsArrayLength; i++)
            {
                this.components[i] = new Uuid.MUniqueID();
                offset = this.components[i].Deserialize(data, offset);
            }
            
            var propsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.props= new MKeyValue[propsArrayLength];
            for(var i = 0; i < propsArrayLength; i++)
            {
                this.props[i] = new MKeyValue();
                offset = this.props[i].Deserialize(data, offset);
            }

            return offset;
        }

        public override string ToString()
        {
            return "MMapFeature: " +
            "\nid: " + id.ToString() +
            "\ncomponents: " + System.String.Join(", ", components.ToList()) +
            "\nprops: " + System.String.Join(", ", props.ToList());
        }
    }
}
