//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Geographic
{
    public class MRoutePath : Message
    {
        public const string RosMessageName = "geographic_msgs/RoutePath";

        //  Path through a route network.
        // 
        //  A path is a sequence of RouteSegment edges.  This information is
        //  extracted from a RouteNetwork graph.  A RoutePath lists the route
        //  segments needed to reach some chosen goal.
        public MHeader header;
        public Uuid.MUniqueID network;
        //  Route network containing this path
        public Uuid.MUniqueID[] segments;
        //  Sequence of RouteSegment IDs
        public MKeyValue[] props;
        //  Key/value properties

        public MRoutePath()
        {
            this.header = new MHeader();
            this.network = new Uuid.MUniqueID();
            this.segments = new Uuid.MUniqueID[0];
            this.props = new MKeyValue[0];
        }

        public MRoutePath(MHeader header, Uuid.MUniqueID network, Uuid.MUniqueID[] segments, MKeyValue[] props)
        {
            this.header = header;
            this.network = network;
            this.segments = segments;
            this.props = props;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.AddRange(network.SerializationStatements());
            
            listOfSerializations.Add(BitConverter.GetBytes(segments.Length));
            foreach(var entry in segments)
                listOfSerializations.Add(entry.Serialize());
            
            listOfSerializations.Add(BitConverter.GetBytes(props.Length));
            foreach(var entry in props)
                listOfSerializations.Add(entry.Serialize());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            offset = this.network.Deserialize(data, offset);
            
            var segmentsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.segments= new Uuid.MUniqueID[segmentsArrayLength];
            for(var i = 0; i < segmentsArrayLength; i++)
            {
                this.segments[i] = new Uuid.MUniqueID();
                offset = this.segments[i].Deserialize(data, offset);
            }
            
            var propsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.props= new MKeyValue[propsArrayLength];
            for(var i = 0; i < propsArrayLength; i++)
            {
                this.props[i] = new MKeyValue();
                offset = this.props[i].Deserialize(data, offset);
            }

            return offset;
        }

        public override string ToString()
        {
            return "MRoutePath: " +
            "\nheader: " + header.ToString() +
            "\nnetwork: " + network.ToString() +
            "\nsegments: " + System.String.Join(", ", segments.ToList()) +
            "\nprops: " + System.String.Join(", ", props.ToList());
        }
    }
}
