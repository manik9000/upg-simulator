//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Geographic
{
    public class MGeoPoint : Message
    {
        public const string RosMessageName = "geographic_msgs/GeoPoint";

        //  Geographic point, using the WGS 84 reference ellipsoid.
        //  Latitude [degrees]. Positive is north of equator; negative is south
        //  (-90 <= latitude <= +90).
        public double latitude;
        //  Longitude [degrees]. Positive is east of prime meridian; negative is
        //  west (-180 <= longitude <= +180). At the poles, latitude is -90 or
        //  +90, and longitude is irrelevant, but must be in range.
        public double longitude;
        //  Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).
        public double altitude;

        public MGeoPoint()
        {
            this.latitude = 0.0;
            this.longitude = 0.0;
            this.altitude = 0.0;
        }

        public MGeoPoint(double latitude, double longitude, double altitude)
        {
            this.latitude = latitude;
            this.longitude = longitude;
            this.altitude = altitude;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.Add(BitConverter.GetBytes(this.latitude));
            listOfSerializations.Add(BitConverter.GetBytes(this.longitude));
            listOfSerializations.Add(BitConverter.GetBytes(this.altitude));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            this.latitude = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.longitude = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.altitude = BitConverter.ToDouble(data, offset);
            offset += 8;

            return offset;
        }

        public override string ToString()
        {
            return "MGeoPoint: " +
            "\nlatitude: " + latitude.ToString() +
            "\nlongitude: " + longitude.ToString() +
            "\naltitude: " + altitude.ToString();
        }
    }
}
