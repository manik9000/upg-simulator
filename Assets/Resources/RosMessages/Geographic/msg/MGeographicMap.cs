//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Geographic
{
    public class MGeographicMap : Message
    {
        public const string RosMessageName = "geographic_msgs/GeographicMap";

        //  Geographic map for a specified region.
        public MHeader header;
        //  stamp specifies time
        //  frame_id (normally /map)
        public Uuid.MUniqueID id;
        //  identifier for this map
        public MBoundingBox bounds;
        //  2D bounding box containing map
        public MWayPoint[] points;
        //  way-points
        public MMapFeature[] features;
        //  map features
        public MKeyValue[] props;
        //  map properties

        public MGeographicMap()
        {
            this.header = new MHeader();
            this.id = new Uuid.MUniqueID();
            this.bounds = new MBoundingBox();
            this.points = new MWayPoint[0];
            this.features = new MMapFeature[0];
            this.props = new MKeyValue[0];
        }

        public MGeographicMap(MHeader header, Uuid.MUniqueID id, MBoundingBox bounds, MWayPoint[] points, MMapFeature[] features, MKeyValue[] props)
        {
            this.header = header;
            this.id = id;
            this.bounds = bounds;
            this.points = points;
            this.features = features;
            this.props = props;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.AddRange(id.SerializationStatements());
            listOfSerializations.AddRange(bounds.SerializationStatements());
            
            listOfSerializations.Add(BitConverter.GetBytes(points.Length));
            foreach(var entry in points)
                listOfSerializations.Add(entry.Serialize());
            
            listOfSerializations.Add(BitConverter.GetBytes(features.Length));
            foreach(var entry in features)
                listOfSerializations.Add(entry.Serialize());
            
            listOfSerializations.Add(BitConverter.GetBytes(props.Length));
            foreach(var entry in props)
                listOfSerializations.Add(entry.Serialize());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            offset = this.id.Deserialize(data, offset);
            offset = this.bounds.Deserialize(data, offset);
            
            var pointsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.points= new MWayPoint[pointsArrayLength];
            for(var i = 0; i < pointsArrayLength; i++)
            {
                this.points[i] = new MWayPoint();
                offset = this.points[i].Deserialize(data, offset);
            }
            
            var featuresArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.features= new MMapFeature[featuresArrayLength];
            for(var i = 0; i < featuresArrayLength; i++)
            {
                this.features[i] = new MMapFeature();
                offset = this.features[i].Deserialize(data, offset);
            }
            
            var propsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.props= new MKeyValue[propsArrayLength];
            for(var i = 0; i < propsArrayLength; i++)
            {
                this.props[i] = new MKeyValue();
                offset = this.props[i].Deserialize(data, offset);
            }

            return offset;
        }

        public override string ToString()
        {
            return "MGeographicMap: " +
            "\nheader: " + header.ToString() +
            "\nid: " + id.ToString() +
            "\nbounds: " + bounds.ToString() +
            "\npoints: " + System.String.Join(", ", points.ToList()) +
            "\nfeatures: " + System.String.Join(", ", features.ToList()) +
            "\nprops: " + System.String.Join(", ", props.ToList());
        }
    }
}
