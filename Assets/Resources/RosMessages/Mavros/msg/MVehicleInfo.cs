//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MVehicleInfo : Message
    {
        public const string RosMessageName = "mavros_msgs/VehicleInfo";

        //  Vehicle Info msg
        public Std.MHeader header;
        public const byte HAVE_INFO_HEARTBEAT = 1;
        public const byte HAVE_INFO_AUTOPILOT_VERSION = 2;
        public byte available_info;
        //  Bitmap shows what info is available
        //  Vehicle address
        public byte sysid;
        //  SYSTEM ID
        public byte compid;
        //  COMPONENT ID
        //  -*- Heartbeat info -*-
        public byte autopilot;
        //  MAV_AUTOPILOT
        public byte type;
        //  MAV_TYPE
        public byte system_status;
        //  MAV_STATE
        public byte base_mode;
        public uint custom_mode;
        public string mode;
        //  MAV_MODE string
        public uint mode_id;
        //  MAV_MODE number
        //  -*- Autopilot version -*-
        public ulong capabilities;
        //  MAV_PROTOCOL_CAPABILITY
        public uint flight_sw_version;
        //  Firmware version number
        public uint middleware_sw_version;
        //  Middleware version number
        public uint os_sw_version;
        //  Operating system version number
        public uint board_version;
        //  HW / board version (last 8 bytes should be silicon ID, if any)
        public string flight_custom_version;
        //  Custom version field, commonly from the first 8 bytes of the git hash
        public ushort vendor_id;
        //  ID of the board vendor
        public ushort product_id;
        //  ID of the product
        public ulong uid;
        //  UID if provided by hardware

        public MVehicleInfo()
        {
            this.header = new Std.MHeader();
            this.available_info = 0;
            this.sysid = 0;
            this.compid = 0;
            this.autopilot = 0;
            this.type = 0;
            this.system_status = 0;
            this.base_mode = 0;
            this.custom_mode = 0;
            this.mode = "";
            this.mode_id = 0;
            this.capabilities = 0;
            this.flight_sw_version = 0;
            this.middleware_sw_version = 0;
            this.os_sw_version = 0;
            this.board_version = 0;
            this.flight_custom_version = "";
            this.vendor_id = 0;
            this.product_id = 0;
            this.uid = 0;
        }

        public MVehicleInfo(Std.MHeader header, byte available_info, byte sysid, byte compid, byte autopilot, byte type, byte system_status, byte base_mode, uint custom_mode, string mode, uint mode_id, ulong capabilities, uint flight_sw_version, uint middleware_sw_version, uint os_sw_version, uint board_version, string flight_custom_version, ushort vendor_id, ushort product_id, ulong uid)
        {
            this.header = header;
            this.available_info = available_info;
            this.sysid = sysid;
            this.compid = compid;
            this.autopilot = autopilot;
            this.type = type;
            this.system_status = system_status;
            this.base_mode = base_mode;
            this.custom_mode = custom_mode;
            this.mode = mode;
            this.mode_id = mode_id;
            this.capabilities = capabilities;
            this.flight_sw_version = flight_sw_version;
            this.middleware_sw_version = middleware_sw_version;
            this.os_sw_version = os_sw_version;
            this.board_version = board_version;
            this.flight_custom_version = flight_custom_version;
            this.vendor_id = vendor_id;
            this.product_id = product_id;
            this.uid = uid;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(new[]{this.available_info});
            listOfSerializations.Add(new[]{this.sysid});
            listOfSerializations.Add(new[]{this.compid});
            listOfSerializations.Add(new[]{this.autopilot});
            listOfSerializations.Add(new[]{this.type});
            listOfSerializations.Add(new[]{this.system_status});
            listOfSerializations.Add(new[]{this.base_mode});
            listOfSerializations.Add(BitConverter.GetBytes(this.custom_mode));
            listOfSerializations.Add(SerializeString(this.mode));
            listOfSerializations.Add(BitConverter.GetBytes(this.mode_id));
            listOfSerializations.Add(BitConverter.GetBytes(this.capabilities));
            listOfSerializations.Add(BitConverter.GetBytes(this.flight_sw_version));
            listOfSerializations.Add(BitConverter.GetBytes(this.middleware_sw_version));
            listOfSerializations.Add(BitConverter.GetBytes(this.os_sw_version));
            listOfSerializations.Add(BitConverter.GetBytes(this.board_version));
            listOfSerializations.Add(SerializeString(this.flight_custom_version));
            listOfSerializations.Add(BitConverter.GetBytes(this.vendor_id));
            listOfSerializations.Add(BitConverter.GetBytes(this.product_id));
            listOfSerializations.Add(BitConverter.GetBytes(this.uid));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.available_info = data[offset];;
            offset += 1;
            this.sysid = data[offset];;
            offset += 1;
            this.compid = data[offset];;
            offset += 1;
            this.autopilot = data[offset];;
            offset += 1;
            this.type = data[offset];;
            offset += 1;
            this.system_status = data[offset];;
            offset += 1;
            this.base_mode = data[offset];;
            offset += 1;
            this.custom_mode = BitConverter.ToUInt32(data, offset);
            offset += 4;
            var modeStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.mode = DeserializeString(data, offset, modeStringBytesLength);
            offset += modeStringBytesLength;
            this.mode_id = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.capabilities = BitConverter.ToUInt64(data, offset);
            offset += 8;
            this.flight_sw_version = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.middleware_sw_version = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.os_sw_version = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.board_version = BitConverter.ToUInt32(data, offset);
            offset += 4;
            var flight_custom_versionStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.flight_custom_version = DeserializeString(data, offset, flight_custom_versionStringBytesLength);
            offset += flight_custom_versionStringBytesLength;
            this.vendor_id = BitConverter.ToUInt16(data, offset);
            offset += 2;
            this.product_id = BitConverter.ToUInt16(data, offset);
            offset += 2;
            this.uid = BitConverter.ToUInt64(data, offset);
            offset += 8;

            return offset;
        }

        public override string ToString()
        {
            return "MVehicleInfo: " +
            "\nheader: " + header.ToString() +
            "\navailable_info: " + available_info.ToString() +
            "\nsysid: " + sysid.ToString() +
            "\ncompid: " + compid.ToString() +
            "\nautopilot: " + autopilot.ToString() +
            "\ntype: " + type.ToString() +
            "\nsystem_status: " + system_status.ToString() +
            "\nbase_mode: " + base_mode.ToString() +
            "\ncustom_mode: " + custom_mode.ToString() +
            "\nmode: " + mode.ToString() +
            "\nmode_id: " + mode_id.ToString() +
            "\ncapabilities: " + capabilities.ToString() +
            "\nflight_sw_version: " + flight_sw_version.ToString() +
            "\nmiddleware_sw_version: " + middleware_sw_version.ToString() +
            "\nos_sw_version: " + os_sw_version.ToString() +
            "\nboard_version: " + board_version.ToString() +
            "\nflight_custom_version: " + flight_custom_version.ToString() +
            "\nvendor_id: " + vendor_id.ToString() +
            "\nproduct_id: " + product_id.ToString() +
            "\nuid: " + uid.ToString();
        }
    }
}
