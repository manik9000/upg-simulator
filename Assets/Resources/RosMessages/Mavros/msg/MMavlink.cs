//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MMavlink : Message
    {
        public const string RosMessageName = "mavros_msgs/Mavlink";

        //  Mavlink message transport type.
        // 
        //  Used to transport mavlink_message_t via ROS topic
        // 
        //  :framing_status:
        //        Frame decoding status: OK, CRC error, bad Signature (mavlink v2.0)
        //        You may simply drop all non valid messages.
        //        Used for GCS Bridge to transport unknown messages.
        // 
        //  :magic:
        //        STX byte, used to determine protocol version v1.0 or v2.0.
        // 
        //  Please use mavros_msgs::mavlink::convert() from <mavros_msgs/mavlink_convert.h>
        //  to convert between ROS and MAVLink message type
        //  mavlink_framing_t enum
        public const byte FRAMING_OK = 1;
        public const byte FRAMING_BAD_CRC = 2;
        public const byte FRAMING_BAD_SIGNATURE = 3;
        //  stx values
        public const byte MAVLINK_V10 = 254;
        public const byte MAVLINK_V20 = 253;
        public Std.MHeader header;
        public byte framing_status;
        public byte magic;
        //  STX byte
        public byte len;
        public byte incompat_flags;
        public byte compat_flags;
        public byte seq;
        public byte sysid;
        public byte compid;
        public uint msgid;
        //  24-bit message id
        public ushort checksum;
        public ulong[] payload64;
        public byte[] signature;
        //  optional signature

        public MMavlink()
        {
            this.header = new Std.MHeader();
            this.framing_status = 0;
            this.magic = 0;
            this.len = 0;
            this.incompat_flags = 0;
            this.compat_flags = 0;
            this.seq = 0;
            this.sysid = 0;
            this.compid = 0;
            this.msgid = 0;
            this.checksum = 0;
            this.payload64 = new ulong[0];
            this.signature = new byte[0];
        }

        public MMavlink(Std.MHeader header, byte framing_status, byte magic, byte len, byte incompat_flags, byte compat_flags, byte seq, byte sysid, byte compid, uint msgid, ushort checksum, ulong[] payload64, byte[] signature)
        {
            this.header = header;
            this.framing_status = framing_status;
            this.magic = magic;
            this.len = len;
            this.incompat_flags = incompat_flags;
            this.compat_flags = compat_flags;
            this.seq = seq;
            this.sysid = sysid;
            this.compid = compid;
            this.msgid = msgid;
            this.checksum = checksum;
            this.payload64 = payload64;
            this.signature = signature;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(new[]{this.framing_status});
            listOfSerializations.Add(new[]{this.magic});
            listOfSerializations.Add(new[]{this.len});
            listOfSerializations.Add(new[]{this.incompat_flags});
            listOfSerializations.Add(new[]{this.compat_flags});
            listOfSerializations.Add(new[]{this.seq});
            listOfSerializations.Add(new[]{this.sysid});
            listOfSerializations.Add(new[]{this.compid});
            listOfSerializations.Add(BitConverter.GetBytes(this.msgid));
            listOfSerializations.Add(BitConverter.GetBytes(this.checksum));
            
            listOfSerializations.Add(BitConverter.GetBytes(payload64.Length));
            foreach(var entry in payload64)
                listOfSerializations.Add(BitConverter.GetBytes(entry));
            
            listOfSerializations.Add(BitConverter.GetBytes(signature.Length));
            listOfSerializations.Add(this.signature);

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.framing_status = data[offset];;
            offset += 1;
            this.magic = data[offset];;
            offset += 1;
            this.len = data[offset];;
            offset += 1;
            this.incompat_flags = data[offset];;
            offset += 1;
            this.compat_flags = data[offset];;
            offset += 1;
            this.seq = data[offset];;
            offset += 1;
            this.sysid = data[offset];;
            offset += 1;
            this.compid = data[offset];;
            offset += 1;
            this.msgid = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.checksum = BitConverter.ToUInt16(data, offset);
            offset += 2;
            
            var payload64ArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.payload64= new ulong[payload64ArrayLength];
            for(var i = 0; i < payload64ArrayLength; i++)
            {
                this.payload64[i] = BitConverter.ToUInt64(data, offset);
                offset += 8;
            }
            
            var signatureArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.signature= new byte[signatureArrayLength];
            for(var i = 0; i < signatureArrayLength; i++)
            {
                this.signature[i] = data[offset];
                offset += 1;
            }

            return offset;
        }

        public override string ToString()
        {
            return "MMavlink: " +
            "\nheader: " + header.ToString() +
            "\nframing_status: " + framing_status.ToString() +
            "\nmagic: " + magic.ToString() +
            "\nlen: " + len.ToString() +
            "\nincompat_flags: " + incompat_flags.ToString() +
            "\ncompat_flags: " + compat_flags.ToString() +
            "\nseq: " + seq.ToString() +
            "\nsysid: " + sysid.ToString() +
            "\ncompid: " + compid.ToString() +
            "\nmsgid: " + msgid.ToString() +
            "\nchecksum: " + checksum.ToString() +
            "\npayload64: " + System.String.Join(", ", payload64.ToList()) +
            "\nsignature: " + System.String.Join(", ", signature.ToList());
        }
    }
}
