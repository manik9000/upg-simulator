//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MAltitude : Message
    {
        public const string RosMessageName = "mavros_msgs/Altitude";

        //  Altitude information
        // 
        //  https://mavlink.io/en/messages/common.html#ALTITUDE
        public Std.MHeader header;
        public float monotonic;
        public float amsl;
        public float local;
        public float relative;
        public float terrain;
        public float bottom_clearance;

        public MAltitude()
        {
            this.header = new Std.MHeader();
            this.monotonic = 0.0f;
            this.amsl = 0.0f;
            this.local = 0.0f;
            this.relative = 0.0f;
            this.terrain = 0.0f;
            this.bottom_clearance = 0.0f;
        }

        public MAltitude(Std.MHeader header, float monotonic, float amsl, float local, float relative, float terrain, float bottom_clearance)
        {
            this.header = header;
            this.monotonic = monotonic;
            this.amsl = amsl;
            this.local = local;
            this.relative = relative;
            this.terrain = terrain;
            this.bottom_clearance = bottom_clearance;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.monotonic));
            listOfSerializations.Add(BitConverter.GetBytes(this.amsl));
            listOfSerializations.Add(BitConverter.GetBytes(this.local));
            listOfSerializations.Add(BitConverter.GetBytes(this.relative));
            listOfSerializations.Add(BitConverter.GetBytes(this.terrain));
            listOfSerializations.Add(BitConverter.GetBytes(this.bottom_clearance));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.monotonic = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.amsl = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.local = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.relative = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.terrain = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.bottom_clearance = BitConverter.ToSingle(data, offset);
            offset += 4;

            return offset;
        }

        public override string ToString()
        {
            return "MAltitude: " +
            "\nheader: " + header.ToString() +
            "\nmonotonic: " + monotonic.ToString() +
            "\namsl: " + amsl.ToString() +
            "\nlocal: " + local.ToString() +
            "\nrelative: " + relative.ToString() +
            "\nterrain: " + terrain.ToString() +
            "\nbottom_clearance: " + bottom_clearance.ToString();
        }
    }
}
