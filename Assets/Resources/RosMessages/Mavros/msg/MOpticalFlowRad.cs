//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MOpticalFlowRad : Message
    {
        public const string RosMessageName = "mavros_msgs/OpticalFlowRad";

        //  OPTICAL_FLOW_RAD message data
        public Std.MHeader header;
        public uint integration_time_us;
        public float integrated_x;
        public float integrated_y;
        public float integrated_xgyro;
        public float integrated_ygyro;
        public float integrated_zgyro;
        public short temperature;
        public byte quality;
        public uint time_delta_distance_us;
        public float distance;

        public MOpticalFlowRad()
        {
            this.header = new Std.MHeader();
            this.integration_time_us = 0;
            this.integrated_x = 0.0f;
            this.integrated_y = 0.0f;
            this.integrated_xgyro = 0.0f;
            this.integrated_ygyro = 0.0f;
            this.integrated_zgyro = 0.0f;
            this.temperature = 0;
            this.quality = 0;
            this.time_delta_distance_us = 0;
            this.distance = 0.0f;
        }

        public MOpticalFlowRad(Std.MHeader header, uint integration_time_us, float integrated_x, float integrated_y, float integrated_xgyro, float integrated_ygyro, float integrated_zgyro, short temperature, byte quality, uint time_delta_distance_us, float distance)
        {
            this.header = header;
            this.integration_time_us = integration_time_us;
            this.integrated_x = integrated_x;
            this.integrated_y = integrated_y;
            this.integrated_xgyro = integrated_xgyro;
            this.integrated_ygyro = integrated_ygyro;
            this.integrated_zgyro = integrated_zgyro;
            this.temperature = temperature;
            this.quality = quality;
            this.time_delta_distance_us = time_delta_distance_us;
            this.distance = distance;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.integration_time_us));
            listOfSerializations.Add(BitConverter.GetBytes(this.integrated_x));
            listOfSerializations.Add(BitConverter.GetBytes(this.integrated_y));
            listOfSerializations.Add(BitConverter.GetBytes(this.integrated_xgyro));
            listOfSerializations.Add(BitConverter.GetBytes(this.integrated_ygyro));
            listOfSerializations.Add(BitConverter.GetBytes(this.integrated_zgyro));
            listOfSerializations.Add(BitConverter.GetBytes(this.temperature));
            listOfSerializations.Add(new[]{this.quality});
            listOfSerializations.Add(BitConverter.GetBytes(this.time_delta_distance_us));
            listOfSerializations.Add(BitConverter.GetBytes(this.distance));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.integration_time_us = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.integrated_x = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.integrated_y = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.integrated_xgyro = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.integrated_ygyro = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.integrated_zgyro = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.temperature = BitConverter.ToInt16(data, offset);
            offset += 2;
            this.quality = data[offset];;
            offset += 1;
            this.time_delta_distance_us = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.distance = BitConverter.ToSingle(data, offset);
            offset += 4;

            return offset;
        }

        public override string ToString()
        {
            return "MOpticalFlowRad: " +
            "\nheader: " + header.ToString() +
            "\nintegration_time_us: " + integration_time_us.ToString() +
            "\nintegrated_x: " + integrated_x.ToString() +
            "\nintegrated_y: " + integrated_y.ToString() +
            "\nintegrated_xgyro: " + integrated_xgyro.ToString() +
            "\nintegrated_ygyro: " + integrated_ygyro.ToString() +
            "\nintegrated_zgyro: " + integrated_zgyro.ToString() +
            "\ntemperature: " + temperature.ToString() +
            "\nquality: " + quality.ToString() +
            "\ntime_delta_distance_us: " + time_delta_distance_us.ToString() +
            "\ndistance: " + distance.ToString();
        }
    }
}
