//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MTrajectory : Message
    {
        public const string RosMessageName = "mavros_msgs/Trajectory";

        //  MAVLink message: TRAJECTORY
        //  https://mavlink.io/en/messages/common.html#TRAJECTORY
        public Std.MHeader header;
        public byte type;
        //  See enum MAV_TRAJECTORY_REPRESENTATION.
        public const byte MAV_TRAJECTORY_REPRESENTATION_WAYPOINTS = 0;
        public const byte MAV_TRAJECTORY_REPRESENTATION_BEZIER = 1;
        public MPositionTarget point_1;
        public MPositionTarget point_2;
        public MPositionTarget point_3;
        public MPositionTarget point_4;
        public MPositionTarget point_5;
        public byte[] point_valid;
        //  States if respective point is valid.
        public ushort[] command;
        //  MAV_CMD associated with each point. UINT16_MAX if unused.
        public float[] time_horizon;
        //  if type MAV_TRAJECTORY_REPRESENTATION_BEZIER, it represents the time horizon for each point, otherwise set to NaN

        public MTrajectory()
        {
            this.header = new Std.MHeader();
            this.type = 0;
            this.point_1 = new MPositionTarget();
            this.point_2 = new MPositionTarget();
            this.point_3 = new MPositionTarget();
            this.point_4 = new MPositionTarget();
            this.point_5 = new MPositionTarget();
            this.point_valid = new byte[5];
            this.command = new ushort[5];
            this.time_horizon = new float[5];
        }

        public MTrajectory(Std.MHeader header, byte type, MPositionTarget point_1, MPositionTarget point_2, MPositionTarget point_3, MPositionTarget point_4, MPositionTarget point_5, byte[] point_valid, ushort[] command, float[] time_horizon)
        {
            this.header = header;
            this.type = type;
            this.point_1 = point_1;
            this.point_2 = point_2;
            this.point_3 = point_3;
            this.point_4 = point_4;
            this.point_5 = point_5;
            this.point_valid = point_valid;
            this.command = command;
            this.time_horizon = time_horizon;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(new[]{this.type});
            listOfSerializations.AddRange(point_1.SerializationStatements());
            listOfSerializations.AddRange(point_2.SerializationStatements());
            listOfSerializations.AddRange(point_3.SerializationStatements());
            listOfSerializations.AddRange(point_4.SerializationStatements());
            listOfSerializations.AddRange(point_5.SerializationStatements());
            
            Array.Resize(ref point_valid, 5);
            listOfSerializations.Add(this.point_valid);
            
            Array.Resize(ref command, 5);
            foreach(var entry in command)
                listOfSerializations.Add(BitConverter.GetBytes(entry));
            
            Array.Resize(ref time_horizon, 5);
            foreach(var entry in time_horizon)
                listOfSerializations.Add(BitConverter.GetBytes(entry));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.type = data[offset];;
            offset += 1;
            offset = this.point_1.Deserialize(data, offset);
            offset = this.point_2.Deserialize(data, offset);
            offset = this.point_3.Deserialize(data, offset);
            offset = this.point_4.Deserialize(data, offset);
            offset = this.point_5.Deserialize(data, offset);
            
            this.point_valid= new byte[5];
            for(var i = 0; i < 5; i++)
            {
                this.point_valid[i] = data[offset];
                offset += 1;
            }
            
            this.command= new ushort[5];
            for(var i = 0; i < 5; i++)
            {
                this.command[i] = BitConverter.ToUInt16(data, offset);
                offset += 2;
            }
            
            this.time_horizon= new float[5];
            for(var i = 0; i < 5; i++)
            {
                this.time_horizon[i] = BitConverter.ToSingle(data, offset);
                offset += 4;
            }

            return offset;
        }

        public override string ToString()
        {
            return "MTrajectory: " +
            "\nheader: " + header.ToString() +
            "\ntype: " + type.ToString() +
            "\npoint_1: " + point_1.ToString() +
            "\npoint_2: " + point_2.ToString() +
            "\npoint_3: " + point_3.ToString() +
            "\npoint_4: " + point_4.ToString() +
            "\npoint_5: " + point_5.ToString() +
            "\npoint_valid: " + System.String.Join(", ", point_valid.ToList()) +
            "\ncommand: " + System.String.Join(", ", command.ToList()) +
            "\ntime_horizon: " + System.String.Join(", ", time_horizon.ToList());
        }
    }
}
