//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MHilSensor : Message
    {
        public const string RosMessageName = "mavros_msgs/HilSensor";

        //  HilSensor.msg
        // 
        //  ROS representation of MAVLink HIL_SENSOR
        //  See mavlink message documentation here:
        //  https://mavlink.io/en/messages/common.html#HIL_SENSOR
        public Std.MHeader header;
        public Geometry.MVector3 acc;
        public Geometry.MVector3 gyro;
        public Geometry.MVector3 mag;
        public float abs_pressure;
        public float diff_pressure;
        public float pressure_alt;
        public float temperature;
        public uint fields_updated;

        public MHilSensor()
        {
            this.header = new Std.MHeader();
            this.acc = new Geometry.MVector3();
            this.gyro = new Geometry.MVector3();
            this.mag = new Geometry.MVector3();
            this.abs_pressure = 0.0f;
            this.diff_pressure = 0.0f;
            this.pressure_alt = 0.0f;
            this.temperature = 0.0f;
            this.fields_updated = 0;
        }

        public MHilSensor(Std.MHeader header, Geometry.MVector3 acc, Geometry.MVector3 gyro, Geometry.MVector3 mag, float abs_pressure, float diff_pressure, float pressure_alt, float temperature, uint fields_updated)
        {
            this.header = header;
            this.acc = acc;
            this.gyro = gyro;
            this.mag = mag;
            this.abs_pressure = abs_pressure;
            this.diff_pressure = diff_pressure;
            this.pressure_alt = pressure_alt;
            this.temperature = temperature;
            this.fields_updated = fields_updated;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.AddRange(acc.SerializationStatements());
            listOfSerializations.AddRange(gyro.SerializationStatements());
            listOfSerializations.AddRange(mag.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.abs_pressure));
            listOfSerializations.Add(BitConverter.GetBytes(this.diff_pressure));
            listOfSerializations.Add(BitConverter.GetBytes(this.pressure_alt));
            listOfSerializations.Add(BitConverter.GetBytes(this.temperature));
            listOfSerializations.Add(BitConverter.GetBytes(this.fields_updated));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            offset = this.acc.Deserialize(data, offset);
            offset = this.gyro.Deserialize(data, offset);
            offset = this.mag.Deserialize(data, offset);
            this.abs_pressure = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.diff_pressure = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.pressure_alt = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.temperature = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.fields_updated = BitConverter.ToUInt32(data, offset);
            offset += 4;

            return offset;
        }

        public override string ToString()
        {
            return "MHilSensor: " +
            "\nheader: " + header.ToString() +
            "\nacc: " + acc.ToString() +
            "\ngyro: " + gyro.ToString() +
            "\nmag: " + mag.ToString() +
            "\nabs_pressure: " + abs_pressure.ToString() +
            "\ndiff_pressure: " + diff_pressure.ToString() +
            "\npressure_alt: " + pressure_alt.ToString() +
            "\ntemperature: " + temperature.ToString() +
            "\nfields_updated: " + fields_updated.ToString();
        }
    }
}
