//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MRTKBaseline : Message
    {
        public const string RosMessageName = "mavros_msgs/RTKBaseline";

        //  RTKBaseline received from the FCU.
        //  Full description: https://mavlink.io/en/messages/common.html#GPS_RTK
        //  Mavlink Common, #127and #128
        public Std.MHeader header;
        public uint time_last_baseline_ms;
        public byte rtk_receiver_id;
        public ushort wn;
        public uint tow;
        public byte rtk_health;
        public byte rtk_rate;
        public byte nsats;
        public byte baseline_coords_type;
        public const byte RTK_BASELINE_COORDINATE_SYSTEM_ECEF = 0; //  Earth-centered, earth-fixed
        public const byte RTK_BASELINE_COORDINATE_SYSTEM_NED = 1; //  RTK basestation centered, north, east, down
        public int baseline_a_mm;
        public int baseline_b_mm;
        public int baseline_c_mm;
        public uint accuracy;
        public int iar_num_hypotheses;

        public MRTKBaseline()
        {
            this.header = new Std.MHeader();
            this.time_last_baseline_ms = 0;
            this.rtk_receiver_id = 0;
            this.wn = 0;
            this.tow = 0;
            this.rtk_health = 0;
            this.rtk_rate = 0;
            this.nsats = 0;
            this.baseline_coords_type = 0;
            this.baseline_a_mm = 0;
            this.baseline_b_mm = 0;
            this.baseline_c_mm = 0;
            this.accuracy = 0;
            this.iar_num_hypotheses = 0;
        }

        public MRTKBaseline(Std.MHeader header, uint time_last_baseline_ms, byte rtk_receiver_id, ushort wn, uint tow, byte rtk_health, byte rtk_rate, byte nsats, byte baseline_coords_type, int baseline_a_mm, int baseline_b_mm, int baseline_c_mm, uint accuracy, int iar_num_hypotheses)
        {
            this.header = header;
            this.time_last_baseline_ms = time_last_baseline_ms;
            this.rtk_receiver_id = rtk_receiver_id;
            this.wn = wn;
            this.tow = tow;
            this.rtk_health = rtk_health;
            this.rtk_rate = rtk_rate;
            this.nsats = nsats;
            this.baseline_coords_type = baseline_coords_type;
            this.baseline_a_mm = baseline_a_mm;
            this.baseline_b_mm = baseline_b_mm;
            this.baseline_c_mm = baseline_c_mm;
            this.accuracy = accuracy;
            this.iar_num_hypotheses = iar_num_hypotheses;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.time_last_baseline_ms));
            listOfSerializations.Add(new[]{this.rtk_receiver_id});
            listOfSerializations.Add(BitConverter.GetBytes(this.wn));
            listOfSerializations.Add(BitConverter.GetBytes(this.tow));
            listOfSerializations.Add(new[]{this.rtk_health});
            listOfSerializations.Add(new[]{this.rtk_rate});
            listOfSerializations.Add(new[]{this.nsats});
            listOfSerializations.Add(new[]{this.baseline_coords_type});
            listOfSerializations.Add(BitConverter.GetBytes(this.baseline_a_mm));
            listOfSerializations.Add(BitConverter.GetBytes(this.baseline_b_mm));
            listOfSerializations.Add(BitConverter.GetBytes(this.baseline_c_mm));
            listOfSerializations.Add(BitConverter.GetBytes(this.accuracy));
            listOfSerializations.Add(BitConverter.GetBytes(this.iar_num_hypotheses));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.time_last_baseline_ms = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.rtk_receiver_id = data[offset];;
            offset += 1;
            this.wn = BitConverter.ToUInt16(data, offset);
            offset += 2;
            this.tow = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.rtk_health = data[offset];;
            offset += 1;
            this.rtk_rate = data[offset];;
            offset += 1;
            this.nsats = data[offset];;
            offset += 1;
            this.baseline_coords_type = data[offset];;
            offset += 1;
            this.baseline_a_mm = BitConverter.ToInt32(data, offset);
            offset += 4;
            this.baseline_b_mm = BitConverter.ToInt32(data, offset);
            offset += 4;
            this.baseline_c_mm = BitConverter.ToInt32(data, offset);
            offset += 4;
            this.accuracy = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.iar_num_hypotheses = BitConverter.ToInt32(data, offset);
            offset += 4;

            return offset;
        }

        public override string ToString()
        {
            return "MRTKBaseline: " +
            "\nheader: " + header.ToString() +
            "\ntime_last_baseline_ms: " + time_last_baseline_ms.ToString() +
            "\nrtk_receiver_id: " + rtk_receiver_id.ToString() +
            "\nwn: " + wn.ToString() +
            "\ntow: " + tow.ToString() +
            "\nrtk_health: " + rtk_health.ToString() +
            "\nrtk_rate: " + rtk_rate.ToString() +
            "\nnsats: " + nsats.ToString() +
            "\nbaseline_coords_type: " + baseline_coords_type.ToString() +
            "\nbaseline_a_mm: " + baseline_a_mm.ToString() +
            "\nbaseline_b_mm: " + baseline_b_mm.ToString() +
            "\nbaseline_c_mm: " + baseline_c_mm.ToString() +
            "\naccuracy: " + accuracy.ToString() +
            "\niar_num_hypotheses: " + iar_num_hypotheses.ToString();
        }
    }
}
