//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MESCInfo : Message
    {
        public const string RosMessageName = "mavros_msgs/ESCInfo";

        //  ESCInfo.msg
        // 
        // 
        //  See mavlink message documentation here:
        //  https://mavlink.io/en/messages/common.html#ESC_INFO
        public Std.MHeader header;
        public ushort counter;
        public byte count;
        public byte connection_type;
        public byte info;
        public MESCInfoItem[] esc_info;

        public MESCInfo()
        {
            this.header = new Std.MHeader();
            this.counter = 0;
            this.count = 0;
            this.connection_type = 0;
            this.info = 0;
            this.esc_info = new MESCInfoItem[0];
        }

        public MESCInfo(Std.MHeader header, ushort counter, byte count, byte connection_type, byte info, MESCInfoItem[] esc_info)
        {
            this.header = header;
            this.counter = counter;
            this.count = count;
            this.connection_type = connection_type;
            this.info = info;
            this.esc_info = esc_info;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.counter));
            listOfSerializations.Add(new[]{this.count});
            listOfSerializations.Add(new[]{this.connection_type});
            listOfSerializations.Add(new[]{this.info});
            
            listOfSerializations.Add(BitConverter.GetBytes(esc_info.Length));
            foreach(var entry in esc_info)
                listOfSerializations.Add(entry.Serialize());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.counter = BitConverter.ToUInt16(data, offset);
            offset += 2;
            this.count = data[offset];;
            offset += 1;
            this.connection_type = data[offset];;
            offset += 1;
            this.info = data[offset];;
            offset += 1;
            
            var esc_infoArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.esc_info= new MESCInfoItem[esc_infoArrayLength];
            for(var i = 0; i < esc_infoArrayLength; i++)
            {
                this.esc_info[i] = new MESCInfoItem();
                offset = this.esc_info[i].Deserialize(data, offset);
            }

            return offset;
        }

        public override string ToString()
        {
            return "MESCInfo: " +
            "\nheader: " + header.ToString() +
            "\ncounter: " + counter.ToString() +
            "\ncount: " + count.ToString() +
            "\nconnection_type: " + connection_type.ToString() +
            "\ninfo: " + info.ToString() +
            "\nesc_info: " + System.String.Join(", ", esc_info.ToList());
        }
    }
}
