//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MMountControl : Message
    {
        public const string RosMessageName = "mavros_msgs/MountControl";

        //  MAVLink message: DO_MOUNT_CONTROL
        //  https://mavlink.io/en/messages/common.html#MAV_CMD_DO_MOUNT_CONTROL
        public Std.MHeader header;
        public byte mode;
        //  See enum MAV_MOUNT_MODE.
        public const byte MAV_MOUNT_MODE_RETRACT = 0;
        public const byte MAV_MOUNT_MODE_NEUTRAL = 1;
        public const byte MAV_MOUNT_MODE_MAVLINK_TARGETING = 2;
        public const byte MAV_MOUNT_MODE_RC_TARGETING = 3;
        public const byte MAV_MOUNT_MODE_GPS_POINT = 4;
        public float pitch;
        //  roll degrees or degrees/second depending on mount mode.
        public float roll;
        //  roll degrees or degrees/second depending on mount mode.
        public float yaw;
        //  roll degrees or degrees/second depending on mount mode.
        public float altitude;
        //  altitude depending on mount mode.
        public float latitude;
        //  latitude in degrees * 1E7, set if appropriate mount mode.
        public float longitude;
        //  longitude in degrees * 1E7, set if appropriate mount mode.

        public MMountControl()
        {
            this.header = new Std.MHeader();
            this.mode = 0;
            this.pitch = 0.0f;
            this.roll = 0.0f;
            this.yaw = 0.0f;
            this.altitude = 0.0f;
            this.latitude = 0.0f;
            this.longitude = 0.0f;
        }

        public MMountControl(Std.MHeader header, byte mode, float pitch, float roll, float yaw, float altitude, float latitude, float longitude)
        {
            this.header = header;
            this.mode = mode;
            this.pitch = pitch;
            this.roll = roll;
            this.yaw = yaw;
            this.altitude = altitude;
            this.latitude = latitude;
            this.longitude = longitude;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(new[]{this.mode});
            listOfSerializations.Add(BitConverter.GetBytes(this.pitch));
            listOfSerializations.Add(BitConverter.GetBytes(this.roll));
            listOfSerializations.Add(BitConverter.GetBytes(this.yaw));
            listOfSerializations.Add(BitConverter.GetBytes(this.altitude));
            listOfSerializations.Add(BitConverter.GetBytes(this.latitude));
            listOfSerializations.Add(BitConverter.GetBytes(this.longitude));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.mode = data[offset];;
            offset += 1;
            this.pitch = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.roll = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.yaw = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.altitude = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.latitude = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.longitude = BitConverter.ToSingle(data, offset);
            offset += 4;

            return offset;
        }

        public override string ToString()
        {
            return "MMountControl: " +
            "\nheader: " + header.ToString() +
            "\nmode: " + mode.ToString() +
            "\npitch: " + pitch.ToString() +
            "\nroll: " + roll.ToString() +
            "\nyaw: " + yaw.ToString() +
            "\naltitude: " + altitude.ToString() +
            "\nlatitude: " + latitude.ToString() +
            "\nlongitude: " + longitude.ToString();
        }
    }
}
