//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MHomePosition : Message
    {
        public const string RosMessageName = "mavros_msgs/HomePosition";

        //  MAVLink message: HOME_POSITION
        //  https://mavlink.io/en/messages/common.html#HOME_POSITION
        public Std.MHeader header;
        public Geographic.MGeoPoint geo;
        //  geodetic coordinates in WGS-84 datum
        public Geometry.MPoint position;
        //  local position
        public Geometry.MQuaternion orientation;
        //  XXX: verify field name (q[4])
        public Geometry.MVector3 approach;
        //  position of the end of approach vector

        public MHomePosition()
        {
            this.header = new Std.MHeader();
            this.geo = new Geographic.MGeoPoint();
            this.position = new Geometry.MPoint();
            this.orientation = new Geometry.MQuaternion();
            this.approach = new Geometry.MVector3();
        }

        public MHomePosition(Std.MHeader header, Geographic.MGeoPoint geo, Geometry.MPoint position, Geometry.MQuaternion orientation, Geometry.MVector3 approach)
        {
            this.header = header;
            this.geo = geo;
            this.position = position;
            this.orientation = orientation;
            this.approach = approach;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.AddRange(geo.SerializationStatements());
            listOfSerializations.AddRange(position.SerializationStatements());
            listOfSerializations.AddRange(orientation.SerializationStatements());
            listOfSerializations.AddRange(approach.SerializationStatements());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            offset = this.geo.Deserialize(data, offset);
            offset = this.position.Deserialize(data, offset);
            offset = this.orientation.Deserialize(data, offset);
            offset = this.approach.Deserialize(data, offset);

            return offset;
        }

        public override string ToString()
        {
            return "MHomePosition: " +
            "\nheader: " + header.ToString() +
            "\ngeo: " + geo.ToString() +
            "\nposition: " + position.ToString() +
            "\norientation: " + orientation.ToString() +
            "\napproach: " + approach.ToString();
        }
    }
}
