//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MActuatorControl : Message
    {
        public const string RosMessageName = "mavros_msgs/ActuatorControl";

        //  raw servo values for direct actuator controls
        // 
        //  about groups, mixing and channels:
        //  https://pixhawk.org/dev/mixing
        //  constant for mixer group
        public const byte PX4_MIX_FLIGHT_CONTROL = 0;
        public const byte PX4_MIX_FLIGHT_CONTROL_VTOL_ALT = 1;
        public const byte PX4_MIX_PAYLOAD = 2;
        public const byte PX4_MIX_MANUAL_PASSTHROUGH = 3;
        // uint8 PX4_MIX_FC_MC_VIRT = 4
        // uint8 PX4_MIX_FC_FW_VIRT = 5
        public Std.MHeader header;
        public byte group_mix;
        public float[] controls;

        public MActuatorControl()
        {
            this.header = new Std.MHeader();
            this.group_mix = 0;
            this.controls = new float[8];
        }

        public MActuatorControl(Std.MHeader header, byte group_mix, float[] controls)
        {
            this.header = header;
            this.group_mix = group_mix;
            this.controls = controls;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(new[]{this.group_mix});
            
            Array.Resize(ref controls, 8);
            foreach(var entry in controls)
                listOfSerializations.Add(BitConverter.GetBytes(entry));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.group_mix = data[offset];;
            offset += 1;
            
            this.controls= new float[8];
            for(var i = 0; i < 8; i++)
            {
                this.controls[i] = BitConverter.ToSingle(data, offset);
                offset += 4;
            }

            return offset;
        }

        public override string ToString()
        {
            return "MActuatorControl: " +
            "\nheader: " + header.ToString() +
            "\ngroup_mix: " + group_mix.ToString() +
            "\ncontrols: " + System.String.Join(", ", controls.ToList());
        }
    }
}
