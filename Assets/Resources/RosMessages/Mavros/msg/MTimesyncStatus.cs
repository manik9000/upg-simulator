//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MTimesyncStatus : Message
    {
        public const string RosMessageName = "mavros_msgs/TimesyncStatus";

        //  Status of the MAVLink time synchroniser
        public Std.MHeader header;
        public ulong remote_timestamp_ns;
        //  remote system timestamp (nanoseconds)
        public long observed_offset_ns;
        //  raw time offset directly observed from this timesync packet (nanoseconds)
        public long estimated_offset_ns;
        //  smoothed time offset between companion system and Mavros (nanoseconds)
        public float round_trip_time_ms;
        //  round trip time of this timesync packet (milliseconds)

        public MTimesyncStatus()
        {
            this.header = new Std.MHeader();
            this.remote_timestamp_ns = 0;
            this.observed_offset_ns = 0;
            this.estimated_offset_ns = 0;
            this.round_trip_time_ms = 0.0f;
        }

        public MTimesyncStatus(Std.MHeader header, ulong remote_timestamp_ns, long observed_offset_ns, long estimated_offset_ns, float round_trip_time_ms)
        {
            this.header = header;
            this.remote_timestamp_ns = remote_timestamp_ns;
            this.observed_offset_ns = observed_offset_ns;
            this.estimated_offset_ns = estimated_offset_ns;
            this.round_trip_time_ms = round_trip_time_ms;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.remote_timestamp_ns));
            listOfSerializations.Add(BitConverter.GetBytes(this.observed_offset_ns));
            listOfSerializations.Add(BitConverter.GetBytes(this.estimated_offset_ns));
            listOfSerializations.Add(BitConverter.GetBytes(this.round_trip_time_ms));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.remote_timestamp_ns = BitConverter.ToUInt64(data, offset);
            offset += 8;
            this.observed_offset_ns = BitConverter.ToInt64(data, offset);
            offset += 8;
            this.estimated_offset_ns = BitConverter.ToInt64(data, offset);
            offset += 8;
            this.round_trip_time_ms = BitConverter.ToSingle(data, offset);
            offset += 4;

            return offset;
        }

        public override string ToString()
        {
            return "MTimesyncStatus: " +
            "\nheader: " + header.ToString() +
            "\nremote_timestamp_ns: " + remote_timestamp_ns.ToString() +
            "\nobserved_offset_ns: " + observed_offset_ns.ToString() +
            "\nestimated_offset_ns: " + estimated_offset_ns.ToString() +
            "\nround_trip_time_ms: " + round_trip_time_ms.ToString();
        }
    }
}
