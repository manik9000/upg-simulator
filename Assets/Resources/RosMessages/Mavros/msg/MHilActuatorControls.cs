//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MHilActuatorControls : Message
    {
        public const string RosMessageName = "mavros_msgs/HilActuatorControls";

        //  HilActuatorControls.msg
        // 
        //  ROS representation of MAVLink HIL_ACTUATOR_CONTROLS
        //  See mavlink message documentation here:
        //  https://mavlink.io/en/messages/common.html#HIL_ACTUATOR_CONTROLS
        public Std.MHeader header;
        public float[] controls;
        public byte mode;
        public ulong flags;

        public MHilActuatorControls()
        {
            this.header = new Std.MHeader();
            this.controls = new float[16];
            this.mode = 0;
            this.flags = 0;
        }

        public MHilActuatorControls(Std.MHeader header, float[] controls, byte mode, ulong flags)
        {
            this.header = header;
            this.controls = controls;
            this.mode = mode;
            this.flags = flags;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            
            Array.Resize(ref controls, 16);
            foreach(var entry in controls)
                listOfSerializations.Add(BitConverter.GetBytes(entry));
            listOfSerializations.Add(new[]{this.mode});
            listOfSerializations.Add(BitConverter.GetBytes(this.flags));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            
            this.controls= new float[16];
            for(var i = 0; i < 16; i++)
            {
                this.controls[i] = BitConverter.ToSingle(data, offset);
                offset += 4;
            }
            this.mode = data[offset];;
            offset += 1;
            this.flags = BitConverter.ToUInt64(data, offset);
            offset += 8;

            return offset;
        }

        public override string ToString()
        {
            return "MHilActuatorControls: " +
            "\nheader: " + header.ToString() +
            "\ncontrols: " + System.String.Join(", ", controls.ToList()) +
            "\nmode: " + mode.ToString() +
            "\nflags: " + flags.ToString();
        }
    }
}
