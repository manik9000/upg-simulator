//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MAttitudeTarget : Message
    {
        public const string RosMessageName = "mavros_msgs/AttitudeTarget";

        //  Message for SET_ATTITUDE_TARGET
        // 
        //  Some complex system requires all feautures that mavlink
        //  message provide. See issue #402, #418.
        public Std.MHeader header;
        public byte type_mask;
        public const byte IGNORE_ROLL_RATE = 1; //  body_rate.x
        public const byte IGNORE_PITCH_RATE = 2; //  body_rate.y
        public const byte IGNORE_YAW_RATE = 4; //  body_rate.z
        public const byte IGNORE_THRUST = 64;
        public const byte IGNORE_ATTITUDE = 128; //  orientation field
        public Geometry.MQuaternion orientation;
        public Geometry.MVector3 body_rate;
        public float thrust;

        public MAttitudeTarget()
        {
            this.header = new Std.MHeader();
            this.type_mask = 0;
            this.orientation = new Geometry.MQuaternion();
            this.body_rate = new Geometry.MVector3();
            this.thrust = 0.0f;
        }

        public MAttitudeTarget(Std.MHeader header, byte type_mask, Geometry.MQuaternion orientation, Geometry.MVector3 body_rate, float thrust)
        {
            this.header = header;
            this.type_mask = type_mask;
            this.orientation = orientation;
            this.body_rate = body_rate;
            this.thrust = thrust;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(new[]{this.type_mask});
            listOfSerializations.AddRange(orientation.SerializationStatements());
            listOfSerializations.AddRange(body_rate.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.thrust));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.type_mask = data[offset];;
            offset += 1;
            offset = this.orientation.Deserialize(data, offset);
            offset = this.body_rate.Deserialize(data, offset);
            this.thrust = BitConverter.ToSingle(data, offset);
            offset += 4;

            return offset;
        }

        public override string ToString()
        {
            return "MAttitudeTarget: " +
            "\nheader: " + header.ToString() +
            "\ntype_mask: " + type_mask.ToString() +
            "\norientation: " + orientation.ToString() +
            "\nbody_rate: " + body_rate.ToString() +
            "\nthrust: " + thrust.ToString();
        }
    }
}
