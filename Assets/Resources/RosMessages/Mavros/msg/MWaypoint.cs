//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    public class MWaypoint : Message
    {
        public const string RosMessageName = "mavros_msgs/Waypoint";

        //  Waypoint.msg
        // 
        //  ROS representation of MAVLink MISSION_ITEM
        //  See mavlink documentation
        //  see enum MAV_FRAME
        public byte frame;
        public const byte FRAME_GLOBAL = 0;
        public const byte FRAME_LOCAL_NED = 1;
        public const byte FRAME_MISSION = 2;
        public const byte FRAME_GLOBAL_REL_ALT = 3;
        public const byte FRAME_LOCAL_ENU = 4;
        //  see enum MAV_CMD and CommandCode.msg
        public ushort command;
        public bool is_current;
        public bool autocontinue;
        //  meaning of this params described in enum MAV_CMD
        public float param1;
        public float param2;
        public float param3;
        public float param4;
        public double x_lat;
        public double y_long;
        public double z_alt;

        public MWaypoint()
        {
            this.frame = 0;
            this.command = 0;
            this.is_current = false;
            this.autocontinue = false;
            this.param1 = 0.0f;
            this.param2 = 0.0f;
            this.param3 = 0.0f;
            this.param4 = 0.0f;
            this.x_lat = 0.0;
            this.y_long = 0.0;
            this.z_alt = 0.0;
        }

        public MWaypoint(byte frame, ushort command, bool is_current, bool autocontinue, float param1, float param2, float param3, float param4, double x_lat, double y_long, double z_alt)
        {
            this.frame = frame;
            this.command = command;
            this.is_current = is_current;
            this.autocontinue = autocontinue;
            this.param1 = param1;
            this.param2 = param2;
            this.param3 = param3;
            this.param4 = param4;
            this.x_lat = x_lat;
            this.y_long = y_long;
            this.z_alt = z_alt;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.Add(new[]{this.frame});
            listOfSerializations.Add(BitConverter.GetBytes(this.command));
            listOfSerializations.Add(BitConverter.GetBytes(this.is_current));
            listOfSerializations.Add(BitConverter.GetBytes(this.autocontinue));
            listOfSerializations.Add(BitConverter.GetBytes(this.param1));
            listOfSerializations.Add(BitConverter.GetBytes(this.param2));
            listOfSerializations.Add(BitConverter.GetBytes(this.param3));
            listOfSerializations.Add(BitConverter.GetBytes(this.param4));
            listOfSerializations.Add(BitConverter.GetBytes(this.x_lat));
            listOfSerializations.Add(BitConverter.GetBytes(this.y_long));
            listOfSerializations.Add(BitConverter.GetBytes(this.z_alt));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            this.frame = data[offset];;
            offset += 1;
            this.command = BitConverter.ToUInt16(data, offset);
            offset += 2;
            this.is_current = BitConverter.ToBoolean(data, offset);
            offset += 1;
            this.autocontinue = BitConverter.ToBoolean(data, offset);
            offset += 1;
            this.param1 = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.param2 = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.param3 = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.param4 = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.x_lat = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.y_long = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.z_alt = BitConverter.ToDouble(data, offset);
            offset += 8;

            return offset;
        }

        public override string ToString()
        {
            return "MWaypoint: " +
            "\nframe: " + frame.ToString() +
            "\ncommand: " + command.ToString() +
            "\nis_current: " + is_current.ToString() +
            "\nautocontinue: " + autocontinue.ToString() +
            "\nparam1: " + param1.ToString() +
            "\nparam2: " + param2.ToString() +
            "\nparam3: " + param3.ToString() +
            "\nparam4: " + param4.ToString() +
            "\nx_lat: " + x_lat.ToString() +
            "\ny_long: " + y_long.ToString() +
            "\nz_alt: " + z_alt.ToString();
        }
    }
}
